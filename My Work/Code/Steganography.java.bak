import java.io.*;
import java.awt.image.*;
import java.awt.Graphics2D;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

class Steganography extends JFrame implements ActionListener
{
	/*-------------GUI------------------*/
	JLabel l;
	JTextArea ta,tb;
	JMenuBar menuBar;
	JMenu menu;
	JMenuItem menuItem,exit;
	JLabel lname,limage,dname,dimage;
	JFileChooser jfc;

	// Behind the screen
	JFrame behindj;
	JTextArea bta,btb,btc;
	JLabel bl1,bl2,bl3;

	/*----------Data Members------------*/
		  String text;
		  File f;
		  BufferedImage image_org,image,readImage;
		  Graphics2D graphics;
		  WritableRaster raster;
		  DataBufferByte buffer;

	/*---------Constructor-------------*/
	Steganography()
	{
	    super("Steganography");
	    l=new JLabel("Decode window");
	    ta=new JTextArea("Your code"); 
		tb=new JTextArea("Enter your code");
		lname=new JLabel("Real image");
		limage=new JLabel("Image");
		lname.setBounds(20,20,100,20);
		limage.setBounds(20,40,200,150);
		dname=new JLabel("New image");
		dimage=new JLabel("Image");
		dname.setBounds(320,20,100,20);
		dimage.setBounds(320,40,200,150);
		menuBar=new JMenuBar();
		menu=new JMenu("Menu");
		menu.setMnemonic(KeyEvent.VK_M);
		menuBar.add(menu);
		menuItem=new JMenuItem("Encode",KeyEvent.VK_E);
		menuItem.addActionListener(this);
		menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,ActionEvent.ALT_MASK));
		menu.add(menuItem);
		menu.addSeparator();
		menuItem=new JMenuItem("Decode",KeyEvent.VK_D);
		menuItem.addActionListener(this);
		menuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D,ActionEvent.ALT_MASK));
		menu.add(menuItem);
		menu.addSeparator();
		exit=new JMenuItem("exit");
		jfc=new JFileChooser();
		exit.addActionListener(this);
		menu.add(exit);

        add(lname);
        add(limage);
		add(dname);
        add(dimage);
        menuBar.add(menu);
		setJMenuBar(menuBar);
		l.setBounds(350,200,300,50); ta.setBounds(350,250,300,250);
		add(l); add(ta);
		l=new JLabel("Encode window");
        l.setBounds(5,200,300,50); tb.setBounds(5,250,300,250);
		add(l); add(tb);
        setLayout(null); setSize(700,650);
		setVisible(true);
    }

	/*--------------------------------------MAIN  METHOD-------------------------*/
	public static void main(String[] args) throws Exception
	{
		new Steganography();
	}

	/*-----------------------------Encode---------------------*/
	public void encode_text(byte[] img,byte[] msg,int start)
	{
		 System.out.println("Before");
		  for(int i=32;i<40;i++)
					System.out.print(img[i]);
            System.out.println();

         for(int i=0;i<msg.length;i++)
			{

			 for(int j=7;j>=0;j--,start++)
		       {
                    int b=msg[i];
					b>>>=j;
					b&=1;
					img[start]=(byte)((img[start]&0xFE)|b);
			   }
			}

			   System.out.println("After");
			   for(int i=32;i<40;i++)
					System.out.print(img[i]);
					System.out.println();
			
	}

	/*--------------DECODE------------------*/
	public byte[] decode_text(byte[] img)
	{

		int len=0;
		for(int i=0;i<32;i++)
		{
            int bit=(img[i]&1);
			System.out.print(bit);
			bit<<=(31-i);
			len|=bit;
		}
		System.out.println("length :"+len);
       byte msg[]=new byte[len];
		for(int i=32,k=0;k<len;k++)
		{
			for(int j=7;j>=0;j--,i++)
			{
				msg[k]=(byte)((msg[k] << 1) | (img[i] & 1));
				//result[b] = (byte)((result[b] << 1) | (image[offset] & 1));
			}
			//System.out.println(msg[k]);
		}
		//System.out.println("length :"+msg.length);*/
		String s=new String("");
				for(int i=0;i<msg.length;i++)
				{
						s+=(char)msg[i];
					/*	if(i%5==0)
							s+="\n";
					*/
				}
				ta.setText(s);

		return msg;
	}

	/*-------Length of data into bytes-------------*/
	public byte[] msgLength(int msg)
	{
		byte[] b=new byte[4];
		b[0]=(byte)(msg >> 24);
		b[1]=(byte)(msg >> 16);
		b[2]=(byte)(msg >> 8);
		b[3]=(byte)(msg );
		return b;
	}

	byte img[];

	public void actionPerformed(ActionEvent e)
	{
		if(e.getActionCommand().equals("Encode"))
		{

		  int x=jfc.showOpenDialog(null);
		  if(x==JFileChooser.APPROVE_OPTION)
			{
				f=jfc.getSelectedFile();
			      try{
						 image_org=ImageIO.read(f);   // Raw File
		              }
			  catch(IOException er)	{	 System.out.println(er); }
        
			}

          if(x==JFileChooser.CANCEL_OPTION)
			{
			  return ;
			}
		  
		  text=tb.getText();
		  /*------------User Space---------*/
		  image=new BufferedImage(image_org.getWidth(),image_org.getHeight(),BufferedImage.TYPE_3BYTE_BGR);
		  graphics=image.createGraphics();
		  graphics.drawRenderedImage(image_org,null);
		  graphics.dispose();
		  raster=image.getRaster();
		  buffer=(DataBufferByte)raster.getDataBuffer();

	      img=buffer.getData();
		  byte msg[]=text.getBytes();
		  byte len[]=msgLength(text.length());

				//	before encoding
							initbehindframe();
							String s=new String("  ");
									for(int i=0;i<50;i++)
										{
											s+=img[i]+" ";
											if(i!=0 && i%20==0)
												s+="\n";
						
										}
									bta.setText(s);
							

		  encode_text(img,len,0);
				//	after hiding the length of message
							s=new String("  ");
									for(int i=0;i<50;i++)
										{
											s+=img[i]+" ";
											if(i!=0 && i%20==0)
												s+="\n";
						
										}
									btb.setText(s);
				
		  encode_text(img,msg,32);
				//	after hiding the message
							s=new String("  ");
									for(int i=0;i<50;i++)
										{
											s+=img[i]+" ";
											if(i!=0 && i%20==0)
												s+="\n";
						
										}
									btc.setText(s);
				
		  limage.setIcon(new ImageIcon("abc.jpg"));
          /*-----------File Output--------------*/
          try{
            ImageIO.write(image,"png",new File("out.png"));
          } catch(Exception er) {}
		  dimage.setIcon(new ImageIcon("out.png"));
		}                                                 ////////// encode
			
		if(e.getActionCommand().equals("Decode"))
		{
           
		   int x=jfc.showOpenDialog(null);
		  if(x==JFileChooser.APPROVE_OPTION)
			{
				f=jfc.getSelectedFile();
			      try{
						 readImage=ImageIO.read(f);   // Raw File
		              }
			  catch(IOException er)	{	 System.out.println(er); }
        
			}

          if(x==JFileChooser.CANCEL_OPTION)
			{
			  return ;
			}
		  
			// USER SPACE
			image=new BufferedImage(readImage.getWidth(),readImage.getHeight(),BufferedImage.TYPE_3BYTE_BGR);
		    graphics=image.createGraphics();
		    graphics.drawRenderedImage(readImage,null);
		    graphics.dispose();
            raster=image.getRaster();
		    buffer=(DataBufferByte)raster.getDataBuffer();

	        img=buffer.getData();

			byte[] dmsg=decode_text(img);
				for(int i=0;i<dmsg.length;i++)
					System.out.print((char)dmsg[i]);
		}

		if(e.getActionCommand().equals("exit"))
		{
			System.exit(0);
		}
	}
	
	// Initialize behind frame
	void initbehindframe()
	{
		behindj=new JFrame("Behind the screen");
		bta=new JTextArea();
		btb=new JTextArea();
		btc=new JTextArea();
		bl1=new JLabel("Before encode");
		bl2=new JLabel("After hiding the length of message");
		bl3=new JLabel("After hiding the massage");
		
		bl1.setBounds(5,10,100,10);
		bl2.setBounds(5,135,300,15);
		bl3.setBounds(5,270,200,15);
		
		bta.setBounds(10,30,470,100);
		btb.setBounds(10,155,470,100);
		btc.setBounds(10,290,470,100);

		behindj.add(bl1);
		behindj.add(bta);
		behindj.add(bl2);
		behindj.add(btb);
		behindj.add(bl3);
		behindj.add(btc);

		behindj.setSize(500,500);
		behindj.setLayout(null);
		behindj.setVisible(true);
		
	}
}
